create type "public"."provider" as enum ('todoist');

create table "public"."integrations" (
    "id" bigint generated by default as identity not null,
    "provider" provider,
    "access_token" text,
    "user_id" uuid
);


alter table "public"."integrations" enable row level security;

CREATE UNIQUE INDEX integration_pkey ON public.integrations USING btree (id);

alter table "public"."integrations" add constraint "integration_pkey" PRIMARY KEY using index "integration_pkey";

alter table "public"."integrations" add constraint "integrations_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."integrations" validate constraint "integrations_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  insert into public.settings (user_id, break_ratio)
  values (new.id, 5);

  insert into public.integration (user_id, provider, access_token)
  values (new.id, NULL, NULL);

  return new;
end;
$function$
;

grant delete on table "public"."integrations" to "anon";

grant insert on table "public"."integrations" to "anon";

grant references on table "public"."integrations" to "anon";

grant select on table "public"."integrations" to "anon";

grant trigger on table "public"."integrations" to "anon";

grant truncate on table "public"."integrations" to "anon";

grant update on table "public"."integrations" to "anon";

grant delete on table "public"."integrations" to "authenticated";

grant insert on table "public"."integrations" to "authenticated";

grant references on table "public"."integrations" to "authenticated";

grant select on table "public"."integrations" to "authenticated";

grant trigger on table "public"."integrations" to "authenticated";

grant truncate on table "public"."integrations" to "authenticated";

grant update on table "public"."integrations" to "authenticated";

grant delete on table "public"."integrations" to "service_role";

grant insert on table "public"."integrations" to "service_role";

grant references on table "public"."integrations" to "service_role";

grant select on table "public"."integrations" to "service_role";

grant trigger on table "public"."integrations" to "service_role";

grant truncate on table "public"."integrations" to "service_role";

grant update on table "public"."integrations" to "service_role";

create policy "Enable select for authenticated users based on user_id"
on "public"."integrations"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for authenticated users based on user_id"
on "public"."integrations"
as permissive
for update
to authenticated
using ((auth.uid() = user_id));



